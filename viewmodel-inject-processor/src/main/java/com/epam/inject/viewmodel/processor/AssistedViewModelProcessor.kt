/*
 * Copyright 2019 EPAM Systems, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.epam.inject.viewmodel.processor

import androidx.lifecycle.ViewModelProvider
import com.epam.inject.viewmodel.AssistedViewModel
import com.epam.inject.viewmodel.processor.filer.FileWriter
import com.epam.inject.viewmodel.processor.generator.FactoryGenerator
import com.epam.inject.viewmodel.processor.generator.ModuleGenerator
import com.epam.inject.viewmodel.processor.store.AssistedViewModelStore
import com.squareup.javapoet.TypeSpec
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.*
import javax.annotation.processing.AbstractProcessor
import javax.annotation.processing.Messager
import javax.annotation.processing.ProcessingEnvironment
import javax.annotation.processing.RoundEnvironment
import javax.annotation.processing.SupportedAnnotationTypes
import javax.annotation.processing.SupportedSourceVersion
import javax.lang.model.SourceVersion
import javax.lang.model.element.TypeElement
import javax.tools.Diagnostic

/**
 * Annotation processor for generating dagger module and [ViewModelProvider.Factory] implementation
 * in order to simplify injection of the dependencies to the ViewModel constructor.
 */
@SupportedAnnotationTypes("com.epam.inject.viewmodel.AssistedViewModel")
@SupportedSourceVersion(SourceVersion.RELEASE_8)
internal class AssistedViewModelProcessor : AbstractProcessor() {

    /**
     * Storage for found ViewModels
     */
    private lateinit var store: AssistedViewModelStore

    /**
     * Initialize [AssistedViewModelProcessor] with [AssistedViewModelStore] instance
     */
    override fun init(processingEnvironment: ProcessingEnvironment) {
        super.init(processingEnvironment)
        store = AssistedViewModelStore(processingEnvironment)
    }

    /**
     * Processes a set of annotated classes to generate dagger modules(for provide factory and ViewModels) and [ViewModelProvider.Factory] implementation.
     *
     * @param elements annotation for processing.
     * @param re container for the information about the current round of the generation.
     * @return always return true as subsequent processors doesn't need to process [AssistedViewModel] annotation.
     */
    override fun process(elements: MutableSet<out TypeElement>, re: RoundEnvironment): Boolean {
        val isFound = store.process(re)
        if (isFound) {
            val factoryGenerator = FactoryGenerator()
            val genClassFactory = factoryGenerator.generateFactoryClass()
            val genFactoryModule = factoryGenerator.generateFactoryModule(genClassFactory)
            val genClassModule =
                ModuleGenerator(processingEnv).generate(store.foundViewModels)
            writeClasses(genClassFactory, genFactoryModule, genClassModule)
        }
        return true
    }

    /**
     * Writes generated classes to the java files. After the completion clears the store.
     * @param genClasses classes should be written to the files for this generation round.
     */
    private fun writeClasses(vararg genClasses: TypeSpec) {
        val fileWriter = FileWriter(processingEnv)
        genClasses.forEach { fileWriter.writeToFile(it) }
        store.clear()
    }

    companion object {

        /**
         * Date time patter for the generation comment.
         * @see [generateBaseComment]
         */
        private const val JAVADOC_DATE_PATTERN = "dd-MMMM-yyyy HH:mm"

        /**
         * Generates a javadoc comment which will mark all files created by the processor.
         * @return string comment with tool name and generation date.
         */
        fun generateBaseComment(): String {
            val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern(JAVADOC_DATE_PATTERN)
                .withLocale(Locale.US)

            return """
                Generated by viewmodel-inject-processor
                ${LocalDateTime.now().format(formatter)}

                """.trimIndent()
        }
    }
}

/**
 * Writes information message to the console during generation process.
 * @param message text of the message.
 */
fun Messager.note(message: String) {
    printMessage(Diagnostic.Kind.NOTE, message)
}

/**
 * Writes error message to the console during generation process.
 * @param message text of the message.
 */
fun Messager.error(message: String) {
    printMessage(Diagnostic.Kind.ERROR, message)
}
