/*
 * Copyright 2019 EPAM Systems, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.epam.inject.viewmodel.processor

import com.google.testing.compile.CompilationSubject
import com.google.testing.compile.Compiler
import com.google.testing.compile.JavaFileObjects
import org.junit.Before
import org.junit.Test

class FactoryTest {

    private lateinit var processor: AssistedViewModelProcessor

    @Before
    fun setUp() {
        processor = AssistedViewModelProcessor()
    }

    private val viewModelClass = JavaFileObjects
            .forSourceString(
                    "test.ViewModelClass",
                    """
                package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;

            public class ViewModelClass extends ViewModel {

                @AssistedViewModel
                public ViewModelClass() {
                }

            }
            """
            )

    @Test
    fun `factory generation`() {

        val expectedFactory = JavaFileObjects.forSourceString(
            "com.epam.inject.viewmodel.GeneratedViewModelFactory",
                """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import java.lang.Class;
            import java.lang.IllegalArgumentException;
            import java.lang.Override;
            import java.util.Map;
            import javax.inject.Provider;

            /**
             * Generated by dagger-2-vm-inject
             * 17-May-2019 13:35
             */
            public final class GeneratedViewModelFactory extends AssistedViewModelFactory {
              private final Map<Class<? extends ViewModel>, Provider<ViewModel>> viewModelMap;

              public GeneratedViewModelFactory(
                  Map<Class<? extends ViewModel>, Provider<ViewModel>> viewModelMap) {
                            this.viewModelMap = viewModelMap;
                          }

              @Override
              public <T extends ViewModel> T create(Class<T> modelClass) {
                final Provider<ViewModel> vmProvider = viewModelMap.get(modelClass);
                if(vmProvider == null) {
                   throw new IllegalArgumentException(modelClass.getSimpleName() + " isn't supported by the AssistedViewModelFactory.");
                }
                final ViewModel viewModel = vmProvider.get();
                if(modelClass.isAssignableFrom(viewModel.getClass())) {
                  return (T) viewModel;
                } else {
                  throw new IllegalArgumentException(modelClass.getSimpleName() + " expected to be subtype of ViewModel class.");
                }
              }
            }
        """.trimIndent()
        )

        val compilation = Compiler.javac().withProcessors(processor).compile(viewModelClass)

        CompilationSubject.assertThat(compilation)
                .succeeded()
        CompilationSubject.assertThat(compilation)
            .generatedSourceFile("com.epam.inject.viewmodel.GeneratedViewModelFactory")
                .hasSourceEquivalentTo(expectedFactory)
    }

    @Test
    fun `factory module generation`() {

        val expectedFactory = JavaFileObjects.forSourceString(
            "com.epam.inject.viewmodel.GeneratedViewModelFactoryModule",
                """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import dagger.Module;
            import dagger.Provides;
            import java.lang.Class;
            import java.util.Map;
            import javax.inject.Provider;

            @Module
            public class GeneratedViewModelFactoryModule {
                @Provides
                public static AssistedViewModelFactory provide_GeneratedViewModelFactory(
                    Map<Class<? extends ViewModel>, Provider<ViewModel>> viewModelMap) {
                        return new GeneratedViewModelFactory(viewModelMap);
                }
            }
        """.trimIndent()
        )

        val compilation = Compiler.javac().withProcessors(processor).compile(viewModelClass)

        CompilationSubject.assertThat(compilation)
                .succeeded()
        CompilationSubject.assertThat(compilation)
            .generatedSourceFile("com.epam.inject.viewmodel.GeneratedViewModelFactoryModule")
                .hasSourceEquivalentTo(expectedFactory)
    }
}
