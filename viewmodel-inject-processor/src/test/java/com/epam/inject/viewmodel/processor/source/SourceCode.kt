package com.epam.inject.viewmodel.processor.source

object SourceCode {
    const val viewModelClassSource = """
            package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;

            public class ViewModelClass extends ViewModel {

                @AssistedViewModel
                public ViewModelClass() {
                }

            }
            """

    const val customScope = """
        package test;

        import javax.inject.Scope;
        import java.lang.annotation.Retention;
        import java.lang.annotation.RetentionPolicy;

        @Scope
        @Retention(RetentionPolicy.RUNTIME)
        public @interface CustomScope {
        }
    """

    const val scopedViewModelSource = """
            package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;
            import javax.inject.Scope;

            public class ViewModelClass extends ViewModel {

                @AssistedViewModel(scope=CustomScope.class)
                public ViewModelClass() {
                }

            }
        """

    object FactoryTest {

        const val factoryResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import java.lang.Class;
            import java.lang.IllegalArgumentException;
            import java.lang.Override;
            import java.util.Map;
            import javax.inject.Provider;

            /**
             * Generated by dagger-2-vm-inject
             * 17-May-2019 13:35
             */
            public final class GeneratedViewModelFactory extends AssistedViewModelFactory {
              private final Map<Class<? extends ViewModel>, Provider<ViewModel>> viewModelMap;

              public GeneratedViewModelFactory(
                  Map<Class<? extends ViewModel>, Provider<ViewModel>> viewModelMap) {
                            this.viewModelMap = viewModelMap;
                          }

              @Override
              public <T extends ViewModel> T create(Class<T> modelClass) {
                final Provider<ViewModel> vmProvider = viewModelMap.get(modelClass);
                if(vmProvider == null) {
                   throw new IllegalArgumentException(modelClass.getSimpleName() + " isn't supported by the AssistedViewModelFactory.");
                }
                final ViewModel viewModel = vmProvider.get();
                if(modelClass.isAssignableFrom(viewModel.getClass())) {
                  return (T) viewModel;
                } else {
                  throw new IllegalArgumentException(modelClass.getSimpleName() + " expected to be subtype of ViewModel class.");
                }
              }
            }
        """

        const val factoryModuleResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import dagger.Module;
            import dagger.Provides;
            import java.lang.Class;
            import java.util.Map;
            import javax.inject.Provider;

            @Module
            public class GeneratedViewModelFactoryModule {
                @Provides
                public static AssistedViewModelFactory provide_GeneratedViewModelFactory(
                    Map<Class<? extends ViewModel>, Provider<ViewModel>> viewModelMap) {
                        return new GeneratedViewModelFactory(viewModelMap);
                }
            }
        """

        const val scopedFactoryResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import java.lang.Class;
            import java.lang.IllegalArgumentException;
            import java.lang.Override;
            import java.util.Map;
            import javax.inject.Provider;

            /**
            * Generated by viewmodel-inject-processor
            * 24-June-2019 13:30
            */
            public final class CustomScopeGeneratedViewModelFactory extends AssistedViewModelFactory {
                private final Map<Class<? extends ViewModel>, Provider<ViewModel>> viewModelMap;

                public CustomScopeGeneratedViewModelFactory(
                    Map<Class<? extends ViewModel>, Provider<ViewModel>> viewModelMap) {
                    this.viewModelMap = viewModelMap;
                }

                @Override
                public <T extends ViewModel> T create(Class<T> modelClass) {
                    final Provider<ViewModel> vmProvider = viewModelMap.get(modelClass);
                    if(vmProvider == null) {
                        throw new IllegalArgumentException(modelClass.getSimpleName() + " isn't supported by the AssistedViewModelFactory.");
                    }
                    final ViewModel viewModel = vmProvider.get();
                    if(modelClass.isAssignableFrom(viewModel.getClass())) {
                        return (T) viewModel;
                    } else {
                        throw new IllegalArgumentException(modelClass.getSimpleName() + " expected to be subtype of ViewModel class.");
                    }
                }
            }
        """
    }

    object StoreTest {
        const val isNotSubclassOfViewModelSource = """
            package test;
            import com.epam.inject.viewmodel.AssistedViewModel;

            public class NotViewModelClass {

                @AssistedViewModel
                public NotViewModelClass() {
                }

            }
            """

        const val hasSeveralMarkedConstructorsSource = """
            package test.fail;
            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;

            public class ViewModelClass extends ViewModel {

                @AssistedViewModel
                public ViewModelClass() {
                }

                @AssistedViewModel
                public ViewModelClass(Object object) {
                }

            }
            """

        const val subclassOfViewModelSource = """
            package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;

            public class ViewModelClass extends ViewModel {

                @AssistedViewModel
                public ViewModelClass(){
                }

            }
            """
    }

    object ModuleTest {
        const val moduleWithOneViewModelResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import dagger.Module;
            import dagger.Provides;
            import dagger.multibindings.IntoMap;
            import test.ViewModelClass;

            /**
             * Generated by dagger-2-vm-inject
             * 17-May-2019 13:25
             */
            @Module(
                includes = GeneratedViewModelFactoryModule.class
            )
            public class ViewModelInjectModule {
            @Provides
            @IntoMap
            @ViewModelKey(test.ViewModelClass.class)
            public static ViewModel provide_test_ViewModelClass() {
              return new ViewModelClass();
            }
            }
        """

        const val additionaViewModelClassSource = """
            package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;

            public class SecondViewModelClass extends ViewModel {

                @AssistedViewModel
                public SecondViewModelClass() {
                }

            }
            """

        const val moduleWithManyViewModelsResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import dagger.Module;
            import dagger.Provides;
            import dagger.multibindings.IntoMap;
            import test.SecondViewModelClass;
            import test.ViewModelClass;

            /**
             * Generated by dagger-2-vm-inject
             * 17-May-2019 13:25
             */
            @Module(
                includes = GeneratedViewModelFactoryModule.class
            )
            public class ViewModelInjectModule {
            @Provides
            @IntoMap
            @ViewModelKey(test.ViewModelClass.class)
            public static ViewModel provide_test_ViewModelClass() {
              return new ViewModelClass();
            }

            @Provides
            @IntoMap
            @ViewModelKey(test.SecondViewModelClass.class)
            public static ViewModel provide_test_SecondViewModelClass() {
              return new SecondViewModelClass();
            }
            }
        """

        const val viewModelWithOneDependencySource = """
            package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;
            import java.lang.String;

            public class DependencyViewModelClass extends ViewModel {
                private final String dependency;

                @AssistedViewModel
                public DependencyViewModelClass(String dependency){
                    this.dependency = dependency;
                }

            }
            """

        const val viewModelWithOneDependencyResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import dagger.Module;
            import dagger.Provides;
            import dagger.multibindings.IntoMap;
            import java.lang.String;
            import test.DependencyViewModelClass;

            /**
             * Generated by dagger-2-vm-inject
             * 17-May-2019 13:25
             */
            @Module(
                includes = GeneratedViewModelFactoryModule.class
            )
            public class ViewModelInjectModule {
            @Provides
            @IntoMap
            @ViewModelKey(test.DependencyViewModelClass.class)
            public static ViewModel provide_test_DependencyViewModelClass(String dependency) {
              return new DependencyViewModelClass(dependency);
            }
            }
        """

        const val viewModelWithManyDependencySource = """
            package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;
            import java.lang.Object;
            import java.lang.String;

            public class DependenciesViewModelClass extends ViewModel {
                private final String dependencyStr;
                private final Object dependencyObj;

                @AssistedViewModel
                public DependenciesViewModelClass(String dependencyStr, Object dependencyObj){
                    this.dependencyStr = dependencyStr;
                    this.dependencyObj = dependencyObj;
                }

            }
            """

        const val viewModelWithManyDependencyResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import dagger.Module;
            import dagger.Provides;
            import dagger.multibindings.IntoMap;
            import java.lang.Object;
            import java.lang.String;
            import test.DependenciesViewModelClass;

            /**
             * Generated by dagger-2-vm-inject
             * 17-May-2019 13:25
             */
            @Module(
                includes = GeneratedViewModelFactoryModule.class
            )
            public class ViewModelInjectModule {
            @Provides
            @IntoMap
            @ViewModelKey(test.DependenciesViewModelClass.class)
            public static ViewModel provide_test_DependenciesViewModelClass(String dependencyStr, Object dependencyObj) {
              return new DependenciesViewModelClass(dependencyStr, dependencyObj);
            }
            }
        """

        const val viewModelWithSeveralAnnotatedConstructorsSource = """
            package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;
            import java.lang.Object;
            import java.lang.String;

            public class DependenciesViewModelClass extends ViewModel {
                private final String dependencyStr;
                private final Object dependencyObj;

                @AssistedViewModel
                public DependenciesViewModelClass(String dependencyStr){
                    this.dependencyStr = dependencyStr;
                }

                @AssistedViewModel
                public DependenciesViewModelClass(Object dependencyObj){
                    this.dependencyObj = dependencyObj;
                }

            }
            """

        const val viewModelWithOneAnnotatedConstructorSource = """
            package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;
            import java.lang.Object;
            import java.lang.String;

            public class DependenciesViewModelClass extends ViewModel {
                private String dependencyStr = null;
                private Object dependencyObj = null;

                public DependenciesViewModelClass(String dependencyStr){
                    this.dependencyStr = dependencyStr;
                }

                @AssistedViewModel
                public DependenciesViewModelClass(Object dependencyObj){
                    this.dependencyObj = dependencyObj;
                }

            }
            """

        const val viewModelWithOneAnnotatedConstructorResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import dagger.Module;
            import dagger.Provides;
            import dagger.multibindings.IntoMap;
            import java.lang.Object;
            import test.DependenciesViewModelClass;

            /**
             * Generated by dagger-2-vm-inject
             * 20-May-2019 9:00
             */
            @Module(
                includes = GeneratedViewModelFactoryModule.class
            )
            public class ViewModelInjectModule {
            @Provides
            @IntoMap
            @ViewModelKey(test.DependenciesViewModelClass.class)
            public static ViewModel provide_test_DependenciesViewModelClass(Object dependencyObj) {
              return new DependenciesViewModelClass(dependencyObj);
            }
            }
        """

        const val viewModelWithDifferentPackageSource = """
            package prod;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;

            public class ViewModelClass extends ViewModel {

                @AssistedViewModel
                public ViewModelClass() {
                }

            }
            """

        const val viewModelWithDifferentPackagesResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import dagger.Module;
            import dagger.Provides;
            import dagger.multibindings.IntoMap;
            import test.ViewModelClass;

            /**
             * Generated by dagger-2-vm-inject
             * 28-May-2019 9:05
             */
            @Module(
                includes = GeneratedViewModelFactoryModule.class
            )
            public class ViewModelInjectModule {
            @Provides
            @IntoMap
            @ViewModelKey(test.ViewModelClass.class)
            public static ViewModel provide_test_ViewModelClass() {
              return new ViewModelClass();
            }

            @Provides
            @IntoMap
            @ViewModelKey(prod.ViewModelClass.class)
            public static ViewModel provide_prod_ViewModelClass() {
              return new prod.ViewModelClass();
            }
            }
        """

        const val scopedViewModelResult = """
            package com.epam.inject.viewmodel;

            import androidx.lifecycle.ViewModel;
            import dagger.Module;
            import dagger.Provides;
            import dagger.multibindings.IntoMap;
            import test.CustomScope;
            import test.ViewModelClass;

            /**
            * Generated by viewmodel-inject-processor
            * 24-June-2019 13:30
            */
            @Module(
                includes = CustomScopeGeneratedViewModelFactoryModule.class
            )
            public class CustomScopeViewModelInjectModule {
                @Provides
                @CustomScope
                @IntoMap
                @ViewModelKey(test.ViewModelClass.class)
                public static ViewModel provide_test_ViewModelClass() {
                    return new ViewModelClass();
                }
            }
        """

        const val scopedViewModelWithWrongScopeSource = """
            package test;

            import com.epam.inject.viewmodel.AssistedViewModel;
            import androidx.lifecycle.ViewModel;

            public class ViewModelClass extends ViewModel {

                @AssistedViewModel(scope = Object.class)
                public ViewModelClass() {
                }

            }
        """
    }
}
